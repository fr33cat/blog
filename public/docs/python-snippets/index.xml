<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python Snippets on fr33cat.github.io</title>
    <link>https://fr33cat.github.io/docs/python-snippets/</link>
    <description>Recent content in Python Snippets on fr33cat.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://fr33cat.github.io/docs/python-snippets/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://fr33cat.github.io/docs/python-snippets/asymetric-encryption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fr33cat.github.io/docs/python-snippets/asymetric-encryption/</guid>
      <description>Using Public/Private Key Pairs for Encryption and Decryption with Python #  In this blog post, we’ll take a look at how to use the cryptography library in Python to generate a public/private key pair and use them for encryption and decryption.
The cryptography library provides a simple and easy-to-use API for performing common cryptographic operations. In our example script, we use the rsa module from the cryptography.hazmat.primitives.asymmetric package to generate a public/private key pair and perform RSA encryption with OAEP padding.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://fr33cat.github.io/docs/python-snippets/email-notifications/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fr33cat.github.io/docs/python-snippets/email-notifications/</guid>
      <description>Using SMTPlib #  In this example we will be using smtplib
import smtplib smtp = smtplib.SMTP(&amp;#39;smtp.office365.com&amp;#39;, 587) Note that this example uses Office 365 as the SMTP server, but you can replace it with your own corporate SMTP server address. You can also use port 465 if your server supports SSL encryption.
Next, you need to authenticate with your username and password using the login method:
smtp.login(&amp;#39;user@company.co&amp;#39;, &amp;#39;password&amp;#39;) Then, you can compose your email message using the email module.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://fr33cat.github.io/docs/python-snippets/symetric-encryption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fr33cat.github.io/docs/python-snippets/symetric-encryption/</guid>
      <description>Encrypting and Decrypting Messages with Python #  In this blog post, we’ll take a look at how to use the cryptography library in Python to encrypt and decrypt messages.
The cryptography library provides a simple and easy-to-use API for performing common cryptographic operations. In our example script, we use the Fernet class from the cryptography.fernet module to perform symmetric encryption and decryption.
First, we define two functions: encrypt_message() and decrypt_message().</description>
    </item>
    
    <item>
      <title></title>
      <link>https://fr33cat.github.io/docs/python-snippets/telegram-bot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fr33cat.github.io/docs/python-snippets/telegram-bot/</guid>
      <description>Simple Python script that responds to certain strings:
import telebot bot_token = &amp;#34;YOUR_BOT_TOKEN_HERE&amp;#34; bot = telebot.TeleBot(bot_token) @bot.message_handler(func=lambda message: True) def handle_message(message): text = message.text.lower() chat_id = message.chat.id if &amp;#34;hello&amp;#34; in text: bot.send_message(chat_id, &amp;#34;Hello there!&amp;#34;) elif &amp;#34;how are you&amp;#34; in text: bot.send_message(chat_id, &amp;#34;I&amp;#39;m doing well, thank you for asking!&amp;#34;) else: bot.send_message(chat_id, &amp;#34;Sorry, I didn&amp;#39;t understand that.&amp;#34;) bot.polling() This script uses the telebot library to create a Telegram bot and handle incoming messages.</description>
    </item>
    
  </channel>
</rss>
